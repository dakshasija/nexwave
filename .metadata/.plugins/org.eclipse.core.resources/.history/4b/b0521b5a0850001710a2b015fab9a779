package com.multi.level3;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Executor_Callable_Ex {

	public static void main(String[] args) {

		ExecutorService executorService = Executors.newCachedThreadPool();

		Callable<String> callableTask1 = () -> {
			System.out.println("requesting biryani......");
			Thread.sleep(5000);
			if (1 == 1)
				throw new Exception("Today monday , no biryani");
			return "Biryani";
		};
		
		Callable<String> callableTask2 = () -> {
			System.out.println("requesting beer......");
			Thread.sleep(5000);
			if (1 == 1)
				throw new Exception("Today monday , no biryani");
			return "Biryani";
		};

		Future<String> future = executorService.submit(callableTask);
		String food = null;
		try {
			food = future.get();
		} catch (InterruptedException | ExecutionException e) {
			// e.printStackTrace();
			System.out.println("i hate you..==>" + e.getMessage());
		}
		System.out.println("yummy " + food);

	}

}
